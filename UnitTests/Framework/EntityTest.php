<?php
require_once 'PHPUnit/Framework.php';
use Glucose\Entity as Entity;
/**
 * Test class for Entity.
 * Generated by PHPUnit on 2009-07-16 at 23:03:39.
 */
class EntityTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var    Entity
     * @access protected
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     *
     * @access protected
     */
    protected function setUp() {
    }
    
    public function testAnonymousIndependence() {
    	$class = 'DummyClass';
    	$entity1 = new Entity($class);
    	$entity1->testField = 1;
    	$entity2 = new Entity($class);
    	$entity2->testField = 2;
    	$entity3 = new Entity($class, array(1));
    	$entity3->testField = 3;
    	$this->assertEquals(1, $entity1->testField);
    	$this->assertEquals(2, $entity2->testField);
    	$this->assertEquals(3, $entity3->testField);
    }
    
    public function testIndependenceInSameClass() {
    	$class = 'DummyClass';
    	$entity1 = new Entity($class, array(1, 2, 3));
    	$entity1->testField = 1;
    	$entity2 = new Entity($class, array(1, 2, 4));
    	$entity2->testField = 2;
    	$this->assertEquals(1, $entity1->testField);
    	$this->assertEquals(2, $entity2->testField);
    }
    
    public function testIndependenceInDifferentClasses() {
    	$entity1 = new Entity('Class1', array(1, 2));
    	$entity1->testField = 3;
    	$entity2 = new Entity('Class2', array(1, 2));
    	$entity2->testField = 4;
    	$this->assertEquals(3, $entity1->testField);
    	$this->assertEquals(4, $entity2->testField);
    }
    
    public function testEntityEquality() {
    	$class = 'DummyClass';
    	$identifer = array(1);
    	$entity1 = new Entity($class, $identifer);
    	$entity2 = new Entity($class, $identifer);
    	$this->assertEquals($entity1, $entity2);
    }
    
    public function testConcurrency() {
    	$class = 'DummyClass';
    	$identifier = array(1);
    	$entity1 = new Entity($class, $identifier);
    	$entity1->testField = 2;
    	$entity2 = new Entity($class, $identifier);
    	$this->assertEquals(2, $entity1->testField);
    	$this->assertEquals(2, $entity2->testField);
    	$entity2->testField = 3;
    	$this->assertEquals(3, $entity2->testField);
    	$this->assertEquals(3, $entity1->testField);
    }
    
    public function testIdentifierUpdate() {
    	echo __METHOD__."\n";
    	$class = 'DummyClass';
    	$identifier1 = array(1);
    	$entity1 = new Entity($class, $identifier1);
    	$entity1->testField = 3;
    	
    	$identifier2 = array(2);
    	$entity1->updateIdentifier($identifier2);
    	
    	$this->assertEquals(3, $entity1->testField);
    	
    	$entity2 = new Entity($class, $identifier2);
    	$this->assertEquals(3, $entity2->testField);
    }
    
    public function testCollisionDetection() {
    	echo __METHOD__."\n";
    	$class = 'DummyClass';
    	$identifier1 = array(1);
    	$entity1 = new Entity($class, $identifier1);
    	$identifier2 = array(2);
    	$entity2 = new Entity($class, $identifier2);
    	$this->setExpectedException('EntityCollisionException', 'Identifier collision! The specified entity already exists.');
    	$entity1->updateIdentifier($identifier2);
    }
    
    public function testAnonymousToIdentifiedConversion() {
    	$class = 'DummyClass';
    	$entity1 = new Entity($class);
    	$entity1->testField = 3;
    	$identifier = array(2);
    	$entity1->updateIdentifier($identifier);
    	$entity2 = new Entity($class, $identifier);
    	$this->assertEquals(3, $entity2->testField);
    }
    
    public function testInvalidIdentifer1() {
    	$class = 'DummyClass';
    	$identifier1 = array(1);
    	$entity1 = new Entity($class, $identifier1);
    	$identifier2 = array(2);
    	$entity1->updateIdentifier($identifier2);
    	$this->setExpectedException('EntityInvalidIdentifierException', 'The entity identifier is no longer valid.');
    	$entity2 = new Entity($class, $identifier1);
    }
    
    public function testInvalidIdentifer2() {
    	$class = 'DummyClass';
    	$identifier1 = array(1);
    	$entity1 = new Entity($class, $identifier1);
    	$identifier2 = array(2);
    	$entity1->updateIdentifier($identifier2);
    	$this->setExpectedException('EntityInvalidIdentifierException', 'The entity identifier is no longer valid.');
    	$entity2 = new Entity($class, $identifier1);
    }
    
    public function testUpdateToInvalidIdentifer() {
    	$class = 'DummyClass';
    	$identifier1 = array(1);
    	$entity1 = new Entity($class, $identifier1);
    	$entity1->testField = 1;
    	$identifier2 = array(2);
    	$entity1->updateIdentifier($identifier2);
    	$entity2 = new Entity($class);
    	$entity2->updateIdentifier($identifier1);
    	$this->assertEquals(1, $entity1->testField);
    	$this->assertNull($entity2->testField);
    }
    
    public function testSuccessfulDestruction() {
    	$class = 'DummyClass';
    	$identifier = array(1);
    	$entity1 = new Entity($class, $identifier);
    	$entity1->testField = 1;
    	unset($entity1);
    	$entity2 = new Entity($class, $identifier);
    	$this->assertNull($entity2->testField);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     *
     * @access protected
     */
    protected function tearDown() {
    }
}
?>
