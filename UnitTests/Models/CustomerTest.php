<?php
require_once 'PHPUnit/Framework.php';

require_once 'ConcreteModelsTestSuite.php';
require_once 'Customer.class.php';
/**
 * Test class for Customer.
 * Generated by PHPUnit on 2009-05-31 at 14:29:58.
 */
class CustomerTest extends PHPUnit_Framework_TestCase {
	/**
	 * @varCustomer
	 * @access protected
	 */
	protected $object;
	
	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 *
	 * @access protected
	 */
	protected function setUp() {
		$GLOBALS['mysqli']->query('START TRANSACTION;');
	}
	
	public function testConcurrency() {
		$customer1 = new Customer;
		$customer1->firstName = 'Anders';
		$customer1->lastName = 'And';
		$customer1->address = 'Paradisæblevej 111';
		$customer1->email = 'anders.and@jva.dk';
		$customer1->city = 1;
		$this->assertNotNull($customer1->address);
		$customer2 = new Customer($customer1->id);
		$customer2->address = 'Paradisæblevej 112';
		$this->assertEquals('Paradisæblevej 112', $customer1->address);
		$customer1->address = 'Paradisæblevej 111';
	}
	
	public function testConcurrency2() {
		$customer3 = new Customer;
		$customer3->firstName = 'Fedtmule';
		$customer3->lastName = 'ingenting';
		$customer3->address = 'Mulevænget 3';
		$customer3->email = 'fedtmule@andenet.dk';
		$customer3->id = 5;
		$customer4 = new Customer(5);
		$customer4->city = 1;
		$this->assertEquals('Mulevænget 3', $customer4->address);
		$customer4->lastName = 'noget';
		$this->assertEquals('noget', $customer3->lastName);
		$this->assertEquals('noget', $customer4->lastName);
	}
	
	public function testTripleConcurrency() {
		$customer1 = new Customer;
		$customer1->firstName = 'Mickey';
		$customer1->lastName = 'Mouse';
		$customer1->address = 'Musensvej 13';
		$customer1->email = 'mickey@andenet.dk';
		$customer1->city = 1;
		$cID = $customer1->id;
		$customer2 = new Customer($cID);
		$customer3 = new Customer($cID);
		$customer3->firstName = 'Micki';
		$this->assertEquals('Micki', $customer1->firstName);
		$this->assertEquals('Micki', $customer2->firstName);
		$customer2->firstName = 'Mickey';
		$this->assertEquals('Mickey', $customer1->firstName);
		$this->assertEquals('Mickey', $customer2->firstName);
		$this->assertEquals('Mickey', $customer3->firstName);
	}
	
//	public function testInitByEmail() {
//		$author = new Customer;
//		$author->email = 'anders@ingemann.de';
//		$author->init();
//		$this->assertEquals('Anders', $author->firstName);
//	}
	
	public function testDeletion() {
		$author = new Customer(1);
		$author->delete();
		unset($author);
		$author = new Customer(1);
		$this->setExpectedException('UndefinedPrimaryKeyException', 'The primary key you specified is not represented in the database.');
		$author->firstName;
	}
	
	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 *
	 * @access protected
	 */
	protected function tearDown() {
		$GLOBALS['mysqli']->query('ROLLBACK;');
	}
}
?>
