<?xml version="1.0" encoding="UTF-8"?>
<project name="Glucose" default="test" basedir=".">
	<property file="build.properties" />
	
	<target name="help">
		<echo>Valid targets are:
test	Builds the test tables runs the unit tests
		with agile documentation and drops the tables.

coverage	Builds the test tables runs the unit tests
		generating coverage reports and drops the tables.

loc		Counts the lines of PHP code in the project.

cpd		Detects copy&amp;paste code.

dep		Runs a dependency analysis.

clean	Cleans out the Reports directory.

tables	Builds the test tables.

drop	Drop the test tables.
		</echo>
	</target>
	
	<target name="test">
		<antcall target="tables" />
		<echo>Running PHPUnit tests</echo>
		<condition property="filter" value="--filter ${tests}" else="">
		      <isset property="tests"/>
		</condition>
		<exec dir="${test.dir}" executable="${phpunit}" osfamily="unix">
			<arg value="--colors" />
			<arg line="${filter}" />
			<arg line="--testdox-html ${report.agiledoc.file}" />
		</exec>
		<exec dir="${test.dir}" executable="${phpunit}" searchpath="true" osfamily="windows">
			<arg line="${filter}" />
			<arg line="--testdox-html ${report.agiledoc.file}" />
		</exec>
		<antcall target="drop" />
	</target>
	
	<target name="coverage">
		<antcall target="tables" />
		<echo>Running PHPUnit tests with code coverage</echo>
		<mkdir dir="${report.coverage.dir}"/>
		<exec dir="${test.dir}" executable="${phpunit}" osfamily="unix">
			<arg value="--colors" />
			<arg line="--coverage-html ${report.coverage.dir}" />
		</exec>
		<exec dir="${test.dir}" executable="${phpunit}" searchpath="true" osfamily="windows">
			<arg line="--coverage-html ${report.coverage.dir}" />
		</exec>
		<antcall target="drop" />
	</target>
	
	<target name="profile">
		<antcall target="tables" />
		<echo>Running PHPUnit tests while profiling</echo>
		<mkdir dir="${report.profiling.dir}"/>
		<exec dir="${test.dir}" executable="${php}" osfamily="unix">
			<arg value="-d xdebug.profiler_enable=on" />
			<arg value="-d xdebug.profiler_output_dir=${report.profiling.dir}" />
			<arg value="-d xdebug.profiler_output_name=cachegrind.out.%t" />
			<arg line="phpunit.php" />
			<arg value="--colors" />
		</exec>
		<exec dir="${test.dir}" executable="${php}" searchpath="true" osfamily="windows">
			<arg value="-d xdebug.profiler_enable=on" />
			<arg value="-d xdebug.profiler_output_dir=${report.profiling.dir}" />
			<arg value="-d xdebug.profiler_output_name=cachegrind.out.%t" />
			<arg line="phpunit.php" />
		</exec>
		<antcall target="drop" />
	</target>

	<target name="loc">
		<echo>Counting lines of code</echo>
		<exec dir="${report.dir}" executable="${phploc}" searchpath="true">
			<arg line="--log-xml ${report.loc.file}" />
			<arg line="--suffixes php" />
			<arg value="${src.dir}" />
		</exec>
	</target>
	
	<target name="cpd">
		<echo>Detecting copy&amp;pasted code lines of code</echo>
		<exec dir="${report.dir}" executable="${phpcpd}" searchpath="true">
			<arg line="--log-pmd ${report.cpd.file}" />
			<arg line="--min-lines 3" />
			<arg line="--min-tokens 15" />
			<arg line="--suffixes php" />
			<arg value="${src.dir}" />
		</exec>
	</target>
	
	<target name="dep">
		<echo>Running code dependency analysis</echo>
		<mkdir dir="${report.depend.dir}"/>
		<exec dir="${report.dir}" executable="${phpdep}" searchpath="true">
			<arg line="--jdepend-chart=${report.depend.dir}/chart.svg" />
			<arg line="--jdepend-xml=${report.depend.dir}/log.xml" />
			<arg line="--overview-pyramid=${report.depend.dir}/pyramid.svg" />
			<arg line="--phpunit-xml=${report.depend.dir}/metrics.xml" />
			<arg line="--summary-xml=${report.depend.dir}/summary.xml" />
			<arg value="${src.dir}" />
		</exec>
	</target>
	
	<target name="clean">
		<delete file="${report.agiledoc.file}" />
		<delete dir="${report.coverage.dir}" />
		<delete file="${report.cpd.file}" />
		<delete dir="${report.depend.dir}" />
		<delete file="${report.loc.file}" />
	</target>
	
	<target name="tables">
		<echo>Building test tables</echo>
		<sql driver="com.mysql.jdbc.Driver"
		     url="jdbc:mysql://${mysql.hostname}:${mysql.port}"
		     userid="${mysql.username}"
		     password="${mysql.password}">
			<classpath>
				<pathelement location="${test.jdbcDriver}"/>
			</classpath>
			DROP SCHEMA IF EXISTS `${test.schema}`;
			CREATE SCHEMA `${test.schema}`;
			DROP SCHEMA IF EXISTS `${test.schema.comparison}`;
			CREATE SCHEMA `${test.schema.comparison}`;
		</sql>
		<replaceregexp file="${test.sqlscript}"
		               match="USE `model_unit_tests`;"
		               replace=""
		               byline="true"/>
		<replaceregexp file="${test.sqlscript}"
		               match="insert into \`model_unit_tests\`\."
		               replace="insert into "
		               byline="true"/>
		<parallel>
			<sql driver="com.mysql.jdbc.Driver"
			     url="jdbc:mysql://${mysql.hostname}:${mysql.port}/${test.schema}"
			     userid="${mysql.username}"
			     password="${mysql.password}"
			     src="${test.sqlscript}"
				 encoding="UTF-8">
				<classpath>
					<pathelement location="${test.jdbcDriver}"/>
				</classpath>
			</sql>
			<sql driver="com.mysql.jdbc.Driver"
			     url="jdbc:mysql://${mysql.hostname}:${mysql.port}/${test.schema.comparison}"
			     userid="${mysql.username}"
			     password="${mysql.password}"
			     src="${test.sqlscript}"
				 encoding="UTF-8">
				<classpath>
					<pathelement location="${test.jdbcDriver}"/>
				</classpath>
			</sql>
		</parallel>
	</target>
	
	<target name="drop">
		<echo>Dropping test tables</echo>
		<sql driver="com.mysql.jdbc.Driver"
		     url="jdbc:mysql://${mysql.hostname}:${mysql.port}"
		     userid="${mysql.username}"
		     password="${mysql.password}">
			<classpath>
				<pathelement location="${test.jdbcDriver}"/>
			</classpath>
			DROP SCHEMA `${test.schema}`;
			DROP SCHEMA `${test.schema.comparison}`;
		</sql>
	</target>
</project>